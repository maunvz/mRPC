/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.javacli;

import com.example.proto.ClientGreeter;
import com.example.proto.Greeter;
import com.example.proto.HelloReply;
import com.example.proto.HelloRequest;
import com.google.protobuf.RpcCallback;
import com.google.protobuf.RpcChannel;
import com.google.protobuf.RpcController;

import java.net.URI;

import io.socket.client.IO;
import io.socket.client.Socket;

import java.util.logging.Level;
import java.util.logging.Logger;

import com.nvz.mrpc.RpcUtils;

public class ClientApp {
    private static Logger logger = Logger.getLogger("Client");
    private static RpcChannel channel;
    private static Socket socket;
    private static Greeter greeter;

    public static void main(String[] args) {
        URI uri = URI.create("http://localhost:8080");
        IO.Options options = IO.Options.builder()
                .setUpgrade(false)
                .build();
        socket = IO.socket(uri, options);
        channel = RpcUtils.makeChannel(socket);
        socket.on(Socket.EVENT_CONNECT, (res) -> {
            logger.log(Level.INFO, "Connect success");
        });
        socket.on(Socket.EVENT_DISCONNECT, (res) -> {
            logger.log(Level.WARNING, "Disconnect");
        });
        socket.on(Socket.EVENT_CONNECT_ERROR, (res) -> {
            logger.log(Level.WARNING, "Connect error ", res);
        });

        // So we can respond to calls from the server
        RpcUtils.wrapSocket(socket, new ClientGreeter() {
            @Override
            public void sayHello(RpcController controller, HelloRequest request, RpcCallback<HelloReply> done) {
                done.run(
                        HelloReply.newBuilder().
                                setMessage("Hello from Java-CLI " + request.getName())
                                .build()
                );
            }
        });

        socket.connect();
        greeter = (Greeter) Greeter.newReflectiveService(Greeter.newStub(channel));
        greeter.sayHello(
                RpcUtils.getDefaultController(),
                HelloRequest.newBuilder().setName("Java-CLI").build(),
                (reply) -> {
                    logger.log(Level.INFO, "Got reply: " + reply.getMessage());
                });
    }
}
